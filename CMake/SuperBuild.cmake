#/*============================================================================
#
#  BARD: Basic Augmented Reality Demo.
#
#  Copyright (c) University College London (UCL). All rights reserved.
#
#  This software is distributed WITHOUT ANY WARRANTY; without even
#  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#  PURPOSE.
#
#  See LICENSE.txt in the top level directory for details.
#
#============================================================================*/

# We need a proper patch program. On Linux and MacOS, we assume
# that "patch" is available. On Windows, we download patch.exe
# if not patch program is found.
find_program(PATCH_COMMAND patch)
if((NOT PATCH_COMMAND OR NOT EXISTS ${PATCH_COMMAND}) AND WIN32)
  downloadFile(${BARD_EP_TARBALL_LOCATION}/patch.exe
               ${CMAKE_CURRENT_BINARY_DIR}/patch.exe)
  find_program(PATCH_COMMAND patch ${CMAKE_CURRENT_BINARY_DIR})
endif()
if(NOT PATCH_COMMAND)
  message(FATAL_ERROR "No patch program found.")
endif()

include(ExternalProject)

set(EP_BASE "${CMAKE_BINARY_DIR}" CACHE PATH "Directory where the external projects are configured and built")
set_property(DIRECTORY PROPERTY EP_BASE ${EP_BASE})
mark_as_advanced(EP_BASE)

# Compute -G arg for configuring external projects with the same CMake generator:
if(CMAKE_EXTRA_GENERATOR)
  set(gen "${CMAKE_EXTRA_GENERATOR} - ${CMAKE_GENERATOR}")
else()
  set(gen "${CMAKE_GENERATOR}")
endif()

if(MSVC)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /bigobj /MP /W0 /Zi")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /bigobj /MP /W0 /Zi")
  # we want symbols, even for release builds!
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /debug")
  set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} /debug")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /debug")
  set(CMAKE_CXX_WARNING_LEVEL 0)
else()
  if(${BUILD_SHARED_LIBS})
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DLINUX_EXTRA")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DLINUX_EXTRA")
  else()
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -DLINUX_EXTRA")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -DLINUX_EXTRA")
  endif()
endif()


set(EP_COMMON_ARGS
#  -DCMAKE_CXX_EXTENSIONS:STRING=${CMAKE_CXX_EXTENSIONS}
#  -DCMAKE_CXX_STANDARD:STRING=${CMAKE_CXX_STANDARD}
#  -DCMAKE_CXX_STANDARD_REQUIRED:BOOL=${CMAKE_CXX_STANDARD_REQUIRED}
  -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
  -DCMAKE_INCLUDE_PATH:PATH=${CMAKE_INCLUDE_PATH}
  -DCMAKE_LIBRARY_PATH:PATH=${CMAKE_LIBRARY_PATH}
  -DBUILD_SHARED_LIBS:BOOL=${BUILD_SHARED_LIBS}
  -DBUILD_TESTING:BOOL=OFF
  -DBUILD_EXAMPLES:BOOL=OFF
  -DDESIRED_QT_VERSION:STRING=${DESIRED_QT_VERSION}
  -DQT_QMAKE_EXECUTABLE:FILEPATH=${QT_QMAKE_EXECUTABLE}
  -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
  -DCMAKE_CONFIGURATION_TYPES:STRING=${CMAKE_CONFIGURATION_TYPES}
  -DCMAKE_VERBOSE_MAKEFILE:BOOL=${CMAKE_VERBOSE_MAKEFILE}
  -DCMAKE_C_COMPILER:FILEPATH=${CMAKE_C_COMPILER}
  -DCMAKE_CXX_COMPILER:FILEPATH=${CMAKE_CXX_COMPILER}
  -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}
  -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}
  #debug flags
  -DCMAKE_CXX_FLAGS_DEBUG:STRING=${CMAKE_CXX_FLAGS_DEBUG}
  -DCMAKE_C_FLAGS_DEBUG:STRING=${CMAKE_C_FLAGS_DEBUG}
  #release flags
  -DCMAKE_CXX_FLAGS_RELEASE:STRING=${CMAKE_CXX_FLAGS_RELEASE}
  -DCMAKE_C_FLAGS_RELEASE:STRING=${CMAKE_C_FLAGS_RELEASE}
  #relwithdebinfo
  -DCMAKE_CXX_FLAGS_RELWITHDEBINFO:STRING=${CMAKE_CXX_FLAGS_RELWITHDEBINFO}
  -DCMAKE_C_FLAGS_RELWITHDEBINFO:STRING=${CMAKE_C_FLAGS_RELWITHDEBINFO}
  #link flags
  -DCMAKE_EXE_LINKER_FLAGS:STRING=${CMAKE_EXE_LINKER_FLAGS}
  -DCMAKE_SHARED_LINKER_FLAGS:STRING=${CMAKE_SHARED_LINKER_FLAGS}
  -DCMAKE_MODULE_LINKER_FLAGS:STRING=${CMAKE_MODULE_LINKER_FLAGS}
)

if(APPLE)
  set(EP_COMMON_ARGS
       -DCMAKE_OSX_ARCHITECTURES:PATH=${CMAKE_OSX_ARCHITECTURES}
       -DCMAKE_OSX_DEPLOYMENT_TARGET:PATH=${CMAKE_OSX_DEPLOYMENT_TARGET}
       -DCMAKE_OSX_SYSROOT:PATH=${CMAKE_OSX_SYSROOT}
       ${EP_COMMON_ARGS}
      )
endif()


######################################################################
# Loop round for each external project, compiling it
######################################################################

include(bardExternalProjectHelperMacros)

set(EXTERNAL_PROJECTS
  VTK
  OpenCV
  ArUco
)

foreach(p ${EXTERNAL_PROJECTS})
  include("CMake/CMakeExternals/${p}.cmake")
endforeach()

######################################################################
# Now compile BARD, using the packages we just provided.
######################################################################
if(NOT DEFINED SUPERBUILD_EXCLUDE_BARDBUILD_TARGET OR NOT SUPERBUILD_EXCLUDE_BARDBUILD_TARGET)

  set(proj BARD)
  set(proj_DEPENDENCIES ${VTK_DEPENDS} ${OpenCV_DEPENDS} ${ArUco_DEPENDS})

  if(MSVC)
    # if we dont do this then windows headers will define all sorts of "keywords"
    # and compilation will fail with the weirdest errors.
    set(BARD_ADDITIONAL_C_FLAGS "${BARD_ADDITIONAL_C_FLAGS} -DWIN32_LEAN_AND_MEAN")
    set(BARD_ADDITIONAL_CXX_FLAGS "${BARD_ADDITIONAL_CXX_FLAGS} -DWIN32_LEAN_AND_MEAN")
    # http://msdn.microsoft.com/en-us/library/aa383745.aspx
    # 0x0501  = Windows XP
    # 0x0601  = Windows 7
    set(BARD_ADDITIONAL_C_FLAGS "${BARD_ADDITIONAL_C_FLAGS} -D_WIN32_WINNT=0x0601")
    set(BARD_ADDITIONAL_CXX_FLAGS "${BARD_ADDITIONAL_CXX_FLAGS} -D_WIN32_WINNT=0x0601")
  endif()

  ExternalProject_Add(${proj}
    LIST_SEPARATOR ^^
    DOWNLOAD_COMMAND ""
    INSTALL_COMMAND ""
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}
    BINARY_DIR ${proj}-build
    PREFIX ${proj}-cmake
    CMAKE_GENERATOR ${gen}
    CMAKE_ARGS
      ${EP_COMMON_ARGS}
      -DCMAKE_PREFIX_PATH:PATH=${BARD_PREFIX_PATH}
      ${BARD_APP_OPTIONS}
      -DBARD_BUILD_ALL_APPS:BOOL=${BARD_BUILD_ALL_APPS}
      -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
      -DCMAKE_VERBOSE_MAKEFILE:BOOL=${CMAKE_VERBOSE_MAKEFILE}
      -DBUILD_TESTING:BOOL=${BUILD_TESTING} # The value set in EP_COMMON_ARGS normally forces this off, but we may need BARD to be on.
      -DBUILD_SUPERBUILD:BOOL=OFF           # Must force this to be off, or else you will loop forever.
      -DBUILD_PCL:BOOL=${BUILD_PCL}
      -DBUILD_RTK:BOOL=${BUILD_RTK}
	  -DBUILD_VL:BOOL=${BUILD_VL}
      -DBUILD_ITKFFTW=${BUILD_ITKFFTW}
      -DBUILD_CAMINO:BOOL=${BUILD_CAMINO}
      -DBUILD_COMMAND_LINE_PROGRAMS:BOOL=${BUILD_COMMAND_LINE_PROGRAMS}
      -DBUILD_COMMAND_LINE_SCRIPTS:BOOL=${BUILD_COMMAND_LINE_SCRIPTS}
      -DBUILD_GUI:BOOL=${BUILD_GUI}
      -DBUILD_IGI:BOOL=${BUILD_IGI}
      -DBUILD_PROTOTYPE:BOOL=${BUILD_PROTOTYPE}
      -DBUILD_PROTOTYPE_JHH:BOOL=${BUILD_PROTOTYPE_JHH}
      -DBUILD_PROTOTYPE_TM:BOOL=${BUILD_PROTOTYPE_TM}
      -DBUILD_PROTOTYPE_GY:BOOL=${BUILD_PROTOTYPE_GY}
      -DBUILD_PROTOTYPE_KKL:BOOL=${BUILD_PROTOTYPE_KKL}
      -DBUILD_PROTOTYPE_BE:BOOL=${BUILD_PROTOTYPE_BE}
      -DBUILD_PROTOTYPE_MJC:BOOL=${BUILD_PROTOTYPE_MJC}
      -DBUILD_TESTING:BOOL=${BUILD_TESTING}
      -DBUILD_MESHING:BOOL=${BUILD_MESHING}
      -DBUILD_NIFTYREG:BOOL=${BUILD_NIFTYREG}
      -DBUILD_NIFTYREC:BOOL=${BUILD_NIFTYREC}
      -DBUILD_NIFTYSIM:BOOL=${BUILD_NIFTYSIM}
      -DBUILD_NIFTYSEG:BOOL=${BUILD_NIFTYSEG}
      -DCUDA_SDK_ROOT_DIR:PATH=${CUDA_SDK_ROOT_DIR}
      -DCUDA_CUT_INCLUDE_DIR:PATH=${CUDA_CUT_INCLUDE_DIR}
      -DNVAPI_INCLUDE_DIR:PATH=${NVAPI_INCLUDE_DIR}
      -DNVAPI_LIBRARY:PATH=${NVAPI_LIBRARY}
      -DBARD_USE_FFTW:BOOL=${BARD_USE_FFTW}
      -DBARD_USE_CUDA:BOOL=${BARD_USE_CUDA}
      -DBARD_DELAYLOAD_CUDA:BOOL=${BARD_DELAYLOAD_CUDA}
      -DBARD_USE_COTIRE:BOOL=${BARD_USE_COTIRE}
      -DBARD_WITHIN_SUPERBUILD:BOOL=ON                    # Set this to ON, as some compilation flags rely on knowing if we are doing superbuild.
      -DBARD_VERSION_MAJOR:STRING=${BARD_VERSION_MAJOR}
      -DBARD_VERSION_MINOR:STRING=${BARD_VERSION_MINOR}
      -DBARD_VERSION_PATCH:STRING=${BARD_VERSION_PATCH}
      -DBARD_PLATFORM:STRING=${BARD_PLATFORM}
      -DBARD_COPYRIGHT:STRING=${BARD_COPYRIGHT}
      -DBARD_ORIGIN_URL:STRING=${BARD_ORIGIN_URL}
      -DBARD_ORIGIN_SHORT_TEXT:STRING=${BARD_ORIGIN_SHORT_TEXT}
      -DBARD_ORIGIN_LONG_TEXT:STRING=${BARD_ORIGIN_LONG_TEXT}
      -DBARD_USER_CONTACT:STRING=${BARD_USER_CONTACT}
      -DBARD_BASE_NAME:STRING=${BARD_BASE_NAME}
      -DBARD_VERSION_STRING:STRING=${BARD_VERSION_STRING}
      -DBARD_GENERATE_DOXYGEN_HELP:BOOL=${BARD_GENERATE_DOXYGEN_HELP}
      -DBARD_VERBOSE_COMPILER_WARNINGS:BOOL=${BARD_VERBOSE_COMPILER_WARNINGS}
      -DBARD_CHECK_COVERAGE:BOOL=${BARD_CHECK_COVERAGE}
      -DBARD_USE_KWSTYLE:BOOL=${BARD_USE_KWSTYLE}
      -DBARD_USE_CPPCHECK:BOOL=${BARD_USE_CPPCHECK}
      -DBARD_ADDITIONAL_C_FLAGS:STRING=${BARD_ADDITIONAL_C_FLAGS}
      -DBARD_ADDITIONAL_CXX_FLAGS:STRING=${BARD_ADDITIONAL_CXX_FLAGS}
      -DBARD_FFTWINSTALL:PATH=${BARD_LINK_PREFIX}/fftw     # We don't have CMake SuperBuild version of FFTW, so must rely on it already being there
      -DBARD_DATA_DIR:PATH=${BARD_DATA_DIR}
      -DBARD_SHOW_CONSOLE_WINDOW:BOOL=${BARD_SHOW_CONSOLE_WINDOW}
      -Daruco_DIR:PATH=${aruco_DIR}
      DEPENDS ${proj_DEPENDENCIES}
  )

endif()
